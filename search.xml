<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Hello World</title>
    <url>/2021/05/27/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p>
<span id="more"></span>

<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>
<h3 id="Code-example"><a href="#Code-example" class="headerlink" title="Code example"></a>Code example</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> *argv[])</span></span>&#123;</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;hello world&quot;</span> &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>blog搭建</category>
      </categories>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title></title>
    <url>/2021/05/28/%E5%A0%86%E7%A9%BA%E9%97%B4/</url>
    <content><![CDATA[<h2 id="堆空间"><a href="#堆空间" class="headerlink" title="堆空间"></a>堆空间</h2><h3 id="堆相关概念"><a href="#堆相关概念" class="headerlink" title="堆相关概念"></a>堆相关概念</h3><p>栈空间特点：函数调用；大小比较小，分配数组固定大小。<br>动态数组本质其实是堆空间。<br>==静态概念：编译期间生效==<br>==动态概念：运行期间生效==<br>                                         <img src="%E5%A0%86%E7%A9%BA%E9%97%B4.assets/%E6%8D%95%E8%8E%B7.PNG">==堆空间内容，栈由高地址向低地址扩展，堆由低地址向高地址扩展==</p>
<h3 id="堆空间的使用"><a href="#堆空间的使用" class="headerlink" title="堆空间的使用"></a>堆空间的使用</h3><h4 id="malloc"><a href="#malloc" class="headerlink" title="malloc()"></a>malloc()</h4><p>语法：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">void</span> *<span class="title">malloc</span><span class="params">(<span class="keyword">size_t</span> size)</span></span>;<span class="comment">//void*为基类型待定的指针类型，使用之前必须强制类型转换</span></span><br></pre></td></tr></table></figure>
<p>功能：在堆空间申请内存，函数指向一个大小为size的空间，如果错误发生返回NULL;</p>
<h4 id="free"><a href="#free" class="headerlink" title="free()"></a>free()</h4><p>语法：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">free</span><span class="params">(<span class="keyword">void</span> *ptr)</span></span>;</span><br></pre></td></tr></table></figure>
<p>功能：函数释放指针ptr指向的空间，以供以后使用。</p>
<p>malloc()与free()用法：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> needSize;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;needSize);</span><br><span class="line">    <span class="keyword">char</span> *p;<span class="comment">//变量p的内存内容为申请空间的地址，p分配在栈上，申请空间分配在堆空间</span></span><br><span class="line">    p = (<span class="keyword">char</span> *)<span class="built_in">malloc</span>(needSize);</span><br><span class="line">    <span class="built_in">memset</span>(p,<span class="number">0</span>,needSize);</span><br><span class="line">    <span class="built_in">strcpy</span>(p,<span class="string">&quot;hello&quot;</span>);</span><br><span class="line">    <span class="built_in">puts</span>(p);</span><br><span class="line">    <span class="built_in">free</span>(p);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><ol>
<li>==free()和malloc()要成对出现,不然会引起内存泄漏。==</li>
</ol>
<h4 id="realloc"><a href="#realloc" class="headerlink" title="realloc()"></a>realloc()</h4><p>语法：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">void</span> *<span class="title">realloc</span><span class="params">(<span class="keyword">void</span> *ptr,<span class="keyword">size_t</span> size)</span></span>;</span><br></pre></td></tr></table></figure>

<p>功能：函数将ptr对象的存储空间改变为给定大小size。参数size可以是任意大小，大于或小于原尺寸都可以。返回值是指向新空间的指针，如果错误发生返回NULL。</p>
<h4 id="calloc"><a href="#calloc" class="headerlink" title="calloc()"></a>calloc()</h4><p>calloc=malloc+memset(0)</p>
<p>语法：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">void</span> *<span class="title">calloc</span><span class="params">(<span class="keyword">size_t</span> num,<span class="keyword">size_t</span> size)</span></span>;</span><br></pre></td></tr></table></figure>

<p>功能：函数返回一个指向num数组空间，每一数组元素大小为size，如果错误发生返回NULL；</p>
<h3 id="栈和堆的区别"><a href="#栈和堆的区别" class="headerlink" title="栈和堆的区别"></a>栈和堆的区别</h3><ol>
<li>堆的空间很大，分配和回收独立于函数调用。<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">char *printStack()&#123;</span></span><br><span class="line"><span class="comment">	char c[] = &quot;I am printStack&quot;;</span></span><br><span class="line"><span class="comment">	puts(c);</span></span><br><span class="line"><span class="comment">	return c;</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">char</span> *<span class="title">printHeap</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="keyword">char</span> *c = (<span class="keyword">char</span> *) <span class="built_in">malloc</span>(<span class="number">30</span>);</span><br><span class="line">    <span class="built_in">strcpy</span>(c, <span class="string">&quot;I am printHeap&quot;</span>);</span><br><span class="line">    <span class="built_in">puts</span>(c);</span><br><span class="line">    <span class="keyword">return</span> c;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="keyword">char</span> *p;</span><br><span class="line">    <span class="comment">//p = printStack(); </span></span><br><span class="line">    p = printHeap();</span><br><span class="line">    <span class="built_in">puts</span>(p);<span class="comment">//可以打印堆，不可打印栈，因为栈的内容在退出函数的时候被自动释放空间。</span></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    堆的内容必须进行手动释放，虽然在函数中malloc()，但是main()中p指向的就是这片内存空间，因此可以在main中释放。</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="built_in">free</span>(p);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ol>
]]></content>
  </entry>
</search>
